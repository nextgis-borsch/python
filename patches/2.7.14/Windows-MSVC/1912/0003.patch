diff -rupN a/Modules/_io/fileio.c b/Modules/_io/fileio.c
--- a/Modules/_io/fileio.c	2017-09-16 20:38:35.000000000 +0300
+++ b/Modules/_io/fileio.c	2018-04-09 02:46:43.000000000 +0300
@@ -162,7 +162,7 @@ check_fd(int fd)
 {
 #if defined(HAVE_FSTAT)
     struct stat buf;
-    if (!_PyVerify_fd(fd) || (fstat(fd, &buf) < 0 && errno == EBADF)) {
+    if (fstat(fd, &buf) < 0 && errno == EBADF) {
         PyObject *exc;
         char *msg = strerror(EBADF);
         exc = PyObject_CallFunction(PyExc_OSError, "(is)",
diff -rupN a/Modules/posixmodule.c b/Modules/posixmodule.c
--- a/Modules/posixmodule.c	2017-09-16 20:38:35.000000000 +0300
+++ b/Modules/posixmodule.c	2018-04-09 02:52:12.000000000 +0300
@@ -529,7 +529,27 @@ _PyInt_FromDev(PY_LONG_LONG v)
 #endif
 
 
-#if defined _MSC_VER && _MSC_VER >= 1400
+#ifdef _MSC_VER
+#if _MSC_VER >= 1900
+
+/* This function lets the Windows CRT validate the file handle without
+   terminating the process if it's invalid. */
+int
+_PyVerify_fd(int fd)
+{
+    intptr_t osh;
+    /* Fast check for the only condition we know */
+    if (fd < 0) {
+        _set_errno(EBADF);
+        return 0;
+    }
+    osh = _get_osfhandle(fd);
+    return osh != (intptr_t)-1;
+}
+
+#define _PyVerify_fd_dup2(fd1, fd2) (_PyVerify_fd(fd1) && (fd2) >= 0)
+
+#elif _MSC_VER >= 1400
 /* Microsoft CRT in VS2005 and higher will verify that a filehandle is
  * valid and raise an assertion if it isn't.
  * Normally, an invalid fd is likely to be a C program error and therefore
@@ -617,6 +637,7 @@ _PyVerify_fd_dup2(int fd1, int fd2)
     else
         return 0;
 }
+#endif
 #else
 /* dummy version. _PyVerify_fd() is already defined in fileobject.h */
 #define _PyVerify_fd_dup2(A, B) (1)
@@ -1232,6 +1253,7 @@ win32_fstat(int file_number, struct win3
         /* This is really a C library error (invalid file handle).
            We set the Win32 error to the closes one matching. */
         SetLastError(ERROR_INVALID_HANDLE);
+        errno = EBADF;
         return -1;
     }
     memset(result, 0, sizeof(*result));
@@ -1240,7 +1262,8 @@ win32_fstat(int file_number, struct win3
     if (type == FILE_TYPE_UNKNOWN) {
         DWORD error = GetLastError();
         if (error != 0) {
-        return -1;
+            errno = EINVAL;
+            return -1;
         }
         /* else: valid but unknown file */
     }
@@ -1254,6 +1277,7 @@ win32_fstat(int file_number, struct win3
     }
 
     if (!GetFileInformationByHandle(h, &info)) {
+        errno = EINVAL;
         return -1;
     }
 
@@ -9574,5 +9598,3 @@ INITFUNC(void)
 #ifdef __cplusplus
 }
 #endif
-
-
diff -rupN a/PC/invalid_parameter_handler.c b/PC/invalid_parameter_handler.c
--- a/PC/invalid_parameter_handler.c	1970-01-01 03:00:00.000000000 +0300
+++ b/PC/invalid_parameter_handler.c	2018-04-09 02:46:43.000000000 +0300
@@ -0,0 +1,22 @@
+#ifdef _MSC_VER
+
+#include <stdlib.h>
+
+#if _MSC_VER >= 1900
+/* pyconfig.h uses this function in the _Py_BEGIN/END_SUPPRESS_IPH
+ * macros. It does not need to be defined when building using MSVC
+ * earlier than 14.0 (_MSC_VER == 1900).
+ */
+
+static void __cdecl _silent_invalid_parameter_handler(
+    wchar_t const* expression,
+    wchar_t const* function,
+    wchar_t const* file,
+    unsigned int line,
+    uintptr_t pReserved) { }
+
+void *_Py_silent_invalid_parameter_handler =
+    (void*)_silent_invalid_parameter_handler;
+#endif
+
+#endif
diff -rupN a/Python/pystate.c b/Python/pystate.c
--- a/Python/pystate.c	2017-09-16 20:38:35.000000000 +0300
+++ b/Python/pystate.c	2018-04-09 02:46:43.000000000 +0300
@@ -22,6 +22,12 @@ the expense of doing their own locking).
 #endif
 #endif
 
+#if defined _MSC_VER && _MSC_VER >= 1900
+/* Issue #23524: Temporary fix to disable termination due to invalid parameters */
+PyAPI_DATA(void*) _Py_silent_invalid_parameter_handler;
+#include <stdlib.h>
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -202,6 +208,10 @@ new_threadstate(PyInterpreterState *inte
         tstate->next = interp->tstate_head;
         interp->tstate_head = tstate;
         HEAD_UNLOCK();
+#if defined _MSC_VER && _MSC_VER >= 1900
+        /* Issue #23524: Temporary fix to disable termination due to invalid parameters */
+        _set_thread_local_invalid_parameter_handler((_invalid_parameter_handler)_Py_silent_invalid_parameter_handler);
+#endif
     }
 
     return tstate;
@@ -661,5 +671,3 @@ PyGILState_Release(PyGILState_STATE olds
 #ifdef __cplusplus
 }
 #endif
-
-
